{"version":3,"file":"static/js/314.4c32e092.chunk.js","mappings":"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","sources":["data/api.js","sections/Cast/Cast.styled.js","sections/Cast/Cast.jsx","utils/Error/Error.styled.js","utils/Error/Error.jsx","utils/Toasts/toaster.js"],"sourcesContent":["import axios from 'axios';\n\nconst TMDB_KEY = 'e5b8bd1b82d4f5b68280cf1e2b92e5f6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/week?api_key=${TMDB_KEY}`);\n  return results.map(({ title, id }) => ({ title, id }));\n};\nexport const getMovieByTextQuery = async textQuery => {\n  const {\n    data: { results },\n  } = await axios.get(`/search/movie?api_key=${TMDB_KEY}&query=${textQuery}&page=1`);\n  return results.map(({ title, id }) => ({ title, id }));\n};\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`/movie/${id}?api_key=${TMDB_KEY}`);\n  const { poster_path, title, release_date, vote_average, overview, genres } = data;\n  return { poster_path, title, release_date, vote_average, overview, genres };\n};\nexport const getMovieCredits = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?api_key=${TMDB_KEY}`);\n  return data.cast.map(({ profile_path, name, character }) => ({\n    profile_path,\n    name,\n    character,\n  }));\n};\nexport const getMovieReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${TMDB_KEY}&page=1`);\n  return data.results.map(({ author, content }) => ({ author, content }));\n};\n","import styled from '@emotion/styled';\n\nexport const ActorsList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const ActorInfo = styled.li`\n  display: flex;\n  gap: 8px;\n  background-color: #facccc5e;\n  border-radius: 5px;\n  overflow: hidden;\n  & img {\n    flex-shrink: 0;\n    width: 100px;\n    height: 150px;\n    object-fit: cover;\n  }\n  & div {\n    width: 180px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from 'data/api';\nimport { ActorsList, ActorInfo } from './Cast.styled';\nimport { Loader } from 'utils/Loader/Loader';\nimport { showToast } from 'utils/Toasts/toaster';\nimport { Error } from 'utils/Error/Error';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchActors = async () => {\n      try {\n        setIsLoading(true);\n        const actors = await API.getMovieCredits(movieId);\n        if (!actors.length) {\n          return showToast(`Sorry, we couldn't find any info`, 'noInfo');\n        }\n        setCast(actors);\n        setError('');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchActors();\n  }, [movieId]);\n  return (\n    <>\n      {isLoading && <Loader />}\n      {cast.length > 0 && (\n        <ActorsList>\n          {cast.map(({ profile_path: profilePath, name, character }) => (\n            <ActorInfo key={name}>\n              <img\n                src={\n                  profilePath !== null\n                    ? `https://image.tmdb.org/t/p/w500/${profilePath}`\n                    : 'assets/defaultIMG.png'\n                }\n                alt=\"Oops!\"\n              />\n              <div>\n                <p>{name}</p>\n                <p>\n                  Character:\n                  <br />\n                  {character}\n                </p>\n              </div>\n            </ActorInfo>\n          ))}\n        </ActorsList>\n      )}\n      {error && <Error />}\n    </>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ErrorMsg = styled.p`\n  margin: 40px auto;\n  width: max-content;\n  max-width: 95vw;\n  padding: 20px 40px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  text-align: center;\n  line-height: 1.71;\n  background-color: lightgray;\n  border: 2px solid black;\n  border-radius: 10px;\n`;\n","import { ErrorMsg } from './Error.styled';\nimport defaultIMG from 'assets/defaultIMG.png';\n\nexport const Error = ({ textError }) => {\n  return (\n    <ErrorMsg>\n      <img src={defaultIMG} alt=\"error\" width={100} />\n      Oops! Something's wrong:\n      <br />‚ùå {textError}\n      <br />\n      Please, refresh this page or try again later\n    </ErrorMsg>\n  );\n};\n","import toast from 'react-hot-toast';\nimport { GiSkullInJar, GiChoppedSkull } from 'react-icons/gi';\n\nconst toastConfig = {\n  incorrectQuery: {\n    icon: <GiSkullInJar size={40} />,\n    style: {\n      color: 'black',\n      background: 'lightgray',\n    },\n  },\n  noInfo: {\n    icon: <GiChoppedSkull size={40} />,\n    style: {\n      color: 'black',\n      background: 'lightgray',\n    },\n  },\n};\n\nexport const showToast = (text, type) => {\n  toast(text, toastConfig[type]);\n};\n"],"names":["TMDB_KEY","axios","getTrendingFilms","results","data","map","title","id","getMovieByTextQuery","textQuery","getMovieDetails","poster_path","release_date","vote_average","overview","genres","getMovieCredits","cast","profile_path","name","character","getMovieReviews","author","content","ActorsList","styled","ActorInfo","Cast","movieId","useParams","useState","setCast","isLoading","setIsLoading","error","setError","useEffect","fetchActors","API","actors","length","showToast","message","Loader","profilePath","src","alt","Error","ErrorMsg","textError","defaultIMG","width","toastConfig","incorrectQuery","icon","size","style","color","background","noInfo","text","type","toast"],"sourceRoot":""}