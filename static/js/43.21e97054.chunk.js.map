{"version":3,"file":"static/js/43.21e97054.chunk.js","mappings":"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","sources":["data/api.js","components/MovieInfo/MovieInfo.jsx","pages/MovieDetails.js","utils/Error/Error.styled.js","utils/Error/Error.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst TMDB_KEY = 'e5b8bd1b82d4f5b68280cf1e2b92e5f6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/week?api_key=${TMDB_KEY}`);\n  return results.map(({ title, id }) => ({ title, id }));\n};\nexport const getMovieByTextQuery = async textQuery => {\n  const {\n    data: { results },\n  } = await axios.get(`/search/movie?api_key=${TMDB_KEY}&query=${textQuery}&page=1`);\n  return results.map(({ title, id }) => ({ title, id }));\n};\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`/movie/${id}?api_key=${TMDB_KEY}`);\n  const { poster_path, title, release_date, vote_average, overview, genres } = data;\n  return { poster_path, title, release_date, vote_average, overview, genres };\n};\nexport const getMovieCredits = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?api_key=${TMDB_KEY}`);\n  return data.cast.map(({ profile_path, name, character }) => ({\n    profile_path,\n    name,\n    character,\n  }));\n};\nexport const getMovieReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${TMDB_KEY}&page=1`);\n  return data.results.map(({ author, content }) => ({ author, content }));\n};\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Container, MovieContainer } from './MovieInfo.styled';\n\nexport const MovieInfo = ({ movie }) => {\n  const location = useLocation();\n  const { title, overview, poster_path, vote_average, genres, release_date } = movie;\n  const releaseDate = release_date.slice(0, 4);\n  const posterPath = poster_path !== null ? `https://image.tmdb.org/t/p/w500/${poster_path}` : '';\n  const voteAverage = vote_average.toFixed(0) * 10;\n  const genresList =\n    genres.length > 0 ? genres.map(({ name }) => name).join(', ') : 'No information';\n  const ReturnHref = location.state?.from ?? '/';\n\n  return (\n    <>\n      <Container>\n        <MovieContainer>\n          <img src={posterPath} alt={title} width=\"500\" height=\"700\" />\n        </MovieContainer>\n        <div>\n          <h2>\n            {title} ({releaseDate})\n          </h2>\n          <p>\n            User Score: <span>{voteAverage}%</span>{' '}\n          </p>\n          <b>Overview:</b>\n          <p>{overview}</p>\n          <b>Genres:</b>\n          <p>{genresList}</p>\n        </div>\n      </Container>\n      <p>Additional information</p>\n      <ul>\n        <li>\n          <Link to=\"cast\" state={{ from: ReturnHref }}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to=\"reviews\" state={{ from: ReturnHref }}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nMovieInfo.propTypes = {\n  movie: PropTypes.exact({\n    poster_path: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.array,\n  }).isRequired,\n};\n","import { useEffect, useState, Suspense } from 'react';\nimport { useLocation, useParams, Outlet } from 'react-router-dom';\nimport * as API from 'data/api';\nimport { MovieInfo } from 'components/MovieInfo/MovieInfo';\nimport { Return } from 'components/Return/Return';\nimport { Loader } from 'components/Loader/Loader';\nimport { Error } from 'utils/Error/Error';\n\nexport default function MovieDetails() {\n  const location = useLocation();\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setIsLoading(true);\n        const film = await API.getMovieDetails(movieId);\n        setMovie(film);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [movieId]);\n  const ReturnHref = location.state?.from ?? '/';\n  return (\n    <main>\n      <Return to={ReturnHref}>Back to movies</Return>\n      {isLoading && <Loader />}\n      {movie && <MovieInfo film={movie} />}\n      {error && <Error />}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ErrorMsg = styled.p`\n  margin: 40px auto;\n  width: max-content;\n  max-width: 95vw;\n  padding: 20px 40px;\n  text-align: center;\n  line-height: 1.71;\n  background-color: #aa3939;\n  color: #ffaaaa;\n  border: 1.5px solid #801515;\n  border-radius: 10px;\n`;\n","import { ErrorMsg } from './Error.styled';\n\nexport const Error = ({ textError }) => {\n  return (\n    <ErrorMsg>\n      Oops! Something's wrong:\n      <br />‚ùå {textError}\n      <br />\n      Please, refresh this page or try again later\n    </ErrorMsg>\n  );\n};\n"],"names":["TMDB_KEY","axios","getTrendingFilms","results","data","map","title","id","getMovieByTextQuery","textQuery","getMovieDetails","poster_path","release_date","vote_average","overview","genres","getMovieCredits","cast","profile_path","name","character","getMovieReviews","author","content","MovieInfo","movie","location","useLocation","releaseDate","slice","posterPath","voteAverage","toFixed","genresList","length","join","ReturnHref","state","from","Container","MovieContainer","src","alt","width","height","to","MovieDetails","movieId","useParams","useState","setMovie","isLoading","setIsLoading","error","setError","useEffect","fetchMovie","API","film","message","Return","Loader","Error","Suspense","fallback","ErrorMsg","styled","textError"],"sourceRoot":""}