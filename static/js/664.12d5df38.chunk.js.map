{"version":3,"file":"static/js/664.12d5df38.chunk.js","mappings":"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","sources":["components/FilmsList/FilmsList.styled.js","components/ListedFilm/ListedFilm.styled.js","components/ListedFilm/ListedFilm.jsx","components/FilmsList/FilmsList.jsx","components/reusable/Error/Error.styled.js","components/reusable/Error/Error.jsx","components/reusable/Toasts/toaster.js","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","pages/Movies.js","utils/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListOfFilms = styled.ol`\n  list-style-type: decimal;\n  list-style-position: inside;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto;\n  gap: 3px;\n  width: max-content;\n`;\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const Item = styled.li`\n  width: 100%;\n  padding: 5px;\n  border-radius: 5px;\n  text-align: left;\n  text-shadow: none;\n  background-color: rgba(255, 255, 255, 0.4);\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover a,\n  &:focus a {\n    text-shadow: 2px 2px 4px #950606;\n  }\n`;\n\nexport const Link = styled(NavLink)`\n  text-transform: uppercase;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Item, Link } from './ListedFilm.styled';\n\nexport const ListedFilm = ({ id, title }) => {\n  const location = useLocation();\n  return (\n    <Item>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        {title}\n      </Link>\n    </Item>\n  );\n};\n\nListedFilm.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { BsFillSuitHeartFill } from 'react-icons/bs';\nimport { ListOfFilms } from './FilmsList.styled';\nimport { ListedFilm } from 'components/ListedFilm/ListedFilm';\n\nexport const FilmsList = ({ films }) => {\n  return (\n    <ListOfFilms>\n      {films.map(({ id, title }) => {\n        return <ListedFilm key={id} id={id} title={title} />;\n      })}\n      <BsFillSuitHeartFill size={25} />\n    </ListOfFilms>\n  );\n};\n\nFilmsList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ErrorMsg = styled.p`\n  margin: 40px auto;\n  width: max-content;\n  max-width: 95vw;\n  padding: 20px 40px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  text-align: center;\n  line-height: 1.71;\n  background-color: lightgray;\n  border: 2px solid black;\n  border-radius: 10px;\n`;\n","import { ErrorMsg } from './Error.styled';\nimport errorIMG from 'assets/errorIMG.png';\n\nexport const Error = ({ textError }) => {\n  return (\n    <ErrorMsg>\n      <img src={errorIMG} alt=\"error\" width={100} />\n      Oops! Something's wrong:\n      <br />‚ùå {textError}\n      <br />\n      Please, refresh this page or try again later\n    </ErrorMsg>\n  );\n};\n","import toast from 'react-hot-toast';\nimport {\n  GiSkullInJar,\n  GiSkullCrossedBones,\n  GiHappySkull,\n  GiChewedSkull,\n  GiSurprisedSkull,\n  GiGooSkull,\n  GiPirateSkull,\n} from 'react-icons/gi';\n\nconst toastConfig = {\n  incorrectQuery: {\n    icon: <GiSkullInJar size={40} color=\"#9c0a21\" />,\n    style: {\n      color: 'black',\n      background: 'rgba(218, 212, 212, 0.8)',\n    },\n  },\n  repeatedQuery: {\n    icon: <GiSkullCrossedBones size={40} color=\"#9c0a21\" />,\n    style: {\n      color: 'black',\n      background: 'rgba(218, 212, 212, 0.8)',\n    },\n  },\n  filmsFound: {\n    icon: <GiHappySkull size={40} color=\"#9c0a21\" />,\n    style: {\n      color: 'black',\n      background: 'rgba(218, 212, 212, 0.8)',\n    },\n  },\n  nothingFound: {\n    icon: <GiChewedSkull size={40} color=\"#9c0a21\" />,\n    style: {\n      color: 'black',\n      background: 'rgba(218, 212, 212, 0.8)',\n    },\n  },\n  noCastInfo: {\n    icon: <GiSurprisedSkull size={40} color=\"#9c0a21\" />,\n    style: {\n      color: 'black',\n      background: 'rgba(218, 212, 212, 0.8)',\n    },\n  },\n  reviewsFound: {\n    icon: <GiGooSkull size={40} color=\"#9c0a21\" />,\n    style: {\n      color: 'black',\n      background: 'rgba(218, 212, 212, 0.8)',\n    },\n  },\n  noReviews: {\n    icon: <GiPirateSkull size={40} color=\"#9c0a21\" />,\n    style: {\n      color: 'black',\n      background: 'rgba(218, 212, 212, 0.8)',\n    },\n  },\n};\n\nexport const showToast = (text, type) => {\n  toast(text, toastConfig[type]);\n};\n","import styled from '@emotion/styled';\n\nexport const SearchForm = styled.form`\n  margin-top: 20px;\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const SearchFormInput = styled.input`\n  padding: 10px 15px;\n  margin-right: 10px;\n  border: 2px solid lightgray;\n  border-radius: 4px;\n  line-height: 1.7;\n  &::placeholder {\n  }\n`;\n\nexport const SearchBtn = styled.button`\n  cursor: pointer;\n  padding: 10px 15px;\n  text-transform: uppercase;\n  color: inherit;\n  background-color: lightgray;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n    0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  border: 2px solid rgb(149, 20, 25, 0.3);\n  border-radius: 4px;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: #b3060d;\n  }\n`;\n\nexport const SearchBtnLabel = styled.span``;\n","import { useState } from 'react';\nimport { SearchForm, SearchBtn, SearchBtnLabel, SearchFormInput } from './Searchbar.styled';\nimport { showToast } from 'components/reusable/Toasts/toaster';\n\nexport const Searchbar = ({ onSubmit }) => {\n  const [textQuery, setTextQuery] = useState('');\n  const reset = () => {\n    setTextQuery('');\n  };\n  const handleChange = evt => {\n    const { value } = evt.target;\n    setTextQuery(value);\n  };\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (textQuery.trim().toLowerCase() === '') {\n      return showToast('You should enter keyword if you want to find something', 'incorrectQuery');\n    }\n    onSubmit(textQuery);\n    reset();\n  };\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <SearchFormInput\n        type=\"text\"\n        autoFocus\n        autocomplete=\"off\"\n        placeholder=\"Looking for...\"\n        value={textQuery}\n        onChange={handleChange}\n      />\n      <SearchBtn type=\"submit\">\n        <SearchBtnLabel>Search</SearchBtnLabel>\n      </SearchBtn>\n    </SearchForm>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport * as API from 'utils/api';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { FilmsList } from 'components/FilmsList/FilmsList';\nimport { Loader } from 'components/reusable/Loader/Loader';\nimport { showToast } from 'components/reusable/Toasts/toaster';\nimport { Error } from 'components/reusable/Error/Error';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [moviesList, setMoviesList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const textQuery = searchParams.get('query') ?? '';\n  useEffect(() => {\n    if (!textQuery) {\n      return;\n    }\n    const fetchFilms = async () => {\n      try {\n        setIsLoading(true);\n        const films = await API.getMovieByTextQuery(textQuery);\n        setMoviesList(films);\n        if (!films.length) {\n          return showToast(`Sorry, we couldn't find anything upon your request`, 'nothingFound');\n        }\n        showToast(`Look, how many cool movies we found for you!`, 'filmsFound');\n        setError('');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchFilms();\n  }, [searchParams, textQuery]);\n  const onSubmit = query => {\n    if (query.trim().toLowerCase() === textQuery) {\n      return showToast(\n        `There is nothing new for you, but you can try to find some another film`,\n        'repeatedQuery'\n      );\n    }\n    setSearchParams({ query });\n    setMoviesList([]);\n  };\n  return (\n    <main>\n      <Searchbar onSubmit={onSubmit} />\n      {isLoading && <Loader />}\n      {moviesList.length > 0 && <FilmsList films={moviesList} />}\n      {error && <Error />}\n    </main>\n  );\n}\n","import axios from 'axios';\n\nconst TMDB_KEY = 'e5b8bd1b82d4f5b68280cf1e2b92e5f6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/week?api_key=${TMDB_KEY}`);\n  return results.map(({ title, id }) => ({ title, id }));\n};\nexport const getMovieByTextQuery = async textQuery => {\n  const {\n    data: { results },\n  } = await axios.get(`/search/movie?api_key=${TMDB_KEY}&query=${textQuery}&page=1`);\n  return results.map(({ title, id }) => ({ title, id }));\n};\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`/movie/${id}?api_key=${TMDB_KEY}`);\n  const { poster_path, title, release_date, vote_average, overview, genres } = data;\n  return { poster_path, title, release_date, vote_average, overview, genres };\n};\nexport const getMovieCredits = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?api_key=${TMDB_KEY}`);\n  return data.cast.map(({ profile_path, name, character }) => ({\n    profile_path,\n    name,\n    character,\n  }));\n};\nexport const getMovieReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${TMDB_KEY}&page=1`);\n  return data.results.map(({ author, content }) => ({ author, content }));\n};\n"],"names":["ListOfFilms","styled","Item","Link","NavLink","ListedFilm","id","title","location","useLocation","to","state","from","FilmsList","films","map","size","ErrorMsg","Error","textError","src","errorIMG","alt","width","toastConfig","incorrectQuery","icon","color","style","background","repeatedQuery","filmsFound","nothingFound","noCastInfo","reviewsFound","noReviews","showToast","text","type","toast","SearchForm","SearchFormInput","SearchBtn","SearchBtnLabel","Searchbar","onSubmit","useState","textQuery","setTextQuery","evt","preventDefault","trim","toLowerCase","autoFocus","autocomplete","placeholder","value","onChange","target","Movies","useSearchParams","searchParams","setSearchParams","moviesList","setMoviesList","isLoading","setIsLoading","error","setError","get","useEffect","fetchFilms","API","length","message","query","Loader","TMDB_KEY","axios","getTrendingFilms","results","data","getMovieByTextQuery","getMovieDetails","poster_path","release_date","vote_average","overview","genres","getMovieCredits","cast","profile_path","name","character","getMovieReviews","author","content"],"sourceRoot":""}