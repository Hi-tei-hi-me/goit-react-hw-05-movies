{"version":3,"file":"static/js/764.8890a99d.chunk.js","mappings":"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","sources":["components/ListedFilm/ListedFilm.jsx","components/FilmsList/FilmsList.jsx","data/api.js","pages/Movies.js","utils/Error/Error.styled.js","utils/Error/Error.jsx","utils/Toasts/toaster.js"],"sourcesContent":["import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Item, Link } from './ListedFilm.styled';\n\nexport const ListedFilm = ({ id, title }) => {\n  const location = useLocation();\n  return (\n    <Item>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        {title}\n      </Link>\n    </Item>\n  );\n};\n\nListedFilm.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { ListedFilm } from 'components/ListedFilm/ListedFilm';\nimport { ListOfFilms } from './FilmsList.styled';\n\nexport const FilmsList = ({ films }) => {\n  return (\n    <ListOfFilms>\n      {films.map(({ id, title }) => {\n        return <ListedFilm key={id} id={id} title={title} />;\n      })}\n    </ListOfFilms>\n  );\n};\n\nFilmsList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import axios from 'axios';\n\nconst TMDB_KEY = 'e5b8bd1b82d4f5b68280cf1e2b92e5f6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/week?api_key=${TMDB_KEY}`);\n  return results.map(({ title, id }) => ({ title, id }));\n};\nexport const getMovieByTextQuery = async textQuery => {\n  const {\n    data: { results },\n  } = await axios.get(`/search/movie?api_key=${TMDB_KEY}&query=${textQuery}&page=1`);\n  return results.map(({ title, id }) => ({ title, id }));\n};\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`/movie/${id}?api_key=${TMDB_KEY}`);\n  const { poster_path, title, release_date, vote_average, overview, genres } = data;\n  return { poster_path, title, release_date, vote_average, overview, genres };\n};\nexport const getMovieCredits = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?api_key=${TMDB_KEY}`);\n  return data.cast.map(({ profile_path, name, character }) => ({\n    profile_path,\n    name,\n    character,\n  }));\n};\nexport const getMovieReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${TMDB_KEY}&page=1`);\n  return data.results.map(({ author, content }) => ({ author, content }));\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport * as API from 'data/api';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { FilmsList } from 'components/FilmsList/FilmsList';\nimport { Loader } from 'components/Loader/Loader';\nimport { showToast } from 'utils/Toasts/toaster';\nimport { Error } from 'utils/Error/Error';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [moviesList, setMoviesList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const textQuery = searchParams.get('query') ?? '';\n  useEffect(() => {\n    if (!textQuery) {\n      return;\n    }\n    const fetchFilms = async () => {\n      try {\n        setIsLoading(true);\n        const films = await API.getMovieByTextQuery(textQuery);\n        setMoviesList(films);\n        if (!films.data.length) {\n          return showToast(`Sorry, we couldn't find any ${textQuery}`, 'nothingFound');\n        }\n        setError('');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchFilms();\n  }, [searchParams, textQuery]);\n  const onSubmit = query => {\n    const normalizedQuery = query.searchQuery.trim().toLowerCase();\n    setSearchParams(normalizedQuery !== '' ? { normalizedQuery } : {});\n    setMoviesList([]);\n  };\n  return (\n    <main>\n      <Searchbar onSubmit={onSubmit} />\n      {isLoading && <Loader />}\n      {moviesList.length > 0 && <FilmsList films={moviesList} />}\n      {error && <Error />}\n    </main>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ErrorMsg = styled.p`\n  margin: 40px auto;\n  width: max-content;\n  max-width: 95vw;\n  padding: 20px 40px;\n  text-align: center;\n  line-height: 1.71;\n  background-color: #aa3939;\n  color: #ffaaaa;\n  border: 1.5px solid #801515;\n  border-radius: 10px;\n`;\n","import { ErrorMsg } from './Error.styled';\n\nexport const Error = ({ textError }) => {\n  return (\n    <ErrorMsg>\n      Oops! Something's wrong:\n      <br />‚ùå {textError}\n      <br />\n      Please, refresh this page or try again later\n    </ErrorMsg>\n  );\n};\n","import toast from 'react-hot-toast';\n\nconst toastConfig = {\n  trending: {\n    icon: '‚úØ',\n    style: {\n      background: '#AA5585',\n      color: '#fff',\n    },\n  },\n  nothingFound: {\n    icon: '‚òπ',\n    style: {\n      background: '#4a81e8',\n      color: '#fff',\n    },\n  },\n  found: {\n    icon: '‚úì',\n    style: {\n      background: '#537D43',\n      color: '#fff',\n    },\n  },\n  repeatedQuery: {\n    icon: 'üëÄ',\n    style: {\n      background: '#de6a0a',\n      color: '#fff',\n    },\n  },\n  incorrectQuery: {\n    icon: '‚ö†',\n    style: {\n      background: '#f3dc5d',\n    },\n  },\n};\n\nexport const showToast = (text, type) => {\n  toast(text, toastConfig[type]);\n};\n"],"names":["ListedFilm","id","title","location","useLocation","Item","Link","to","state","from","FilmsList","films","ListOfFilms","map","TMDB_KEY","axios","getTrendingFilms","results","data","getMovieByTextQuery","textQuery","getMovieDetails","poster_path","release_date","vote_average","overview","genres","getMovieCredits","cast","profile_path","name","character","getMovieReviews","author","content","Movies","useSearchParams","searchParams","setSearchParams","useState","moviesList","setMoviesList","isLoading","setIsLoading","error","setError","get","useEffect","fetchFilms","API","length","showToast","message","Searchbar","onSubmit","query","normalizedQuery","searchQuery","trim","toLowerCase","ErrorMsg","styled","Error","textError","toastConfig","trending","icon","style","background","color","nothingFound","found","repeatedQuery","incorrectQuery","text","type","toast"],"sourceRoot":""}